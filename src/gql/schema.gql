schema {
  query: RootQuery
  mutation: Mutation
}

"""Field references one or more document in another dataset"""
directive @crossDatasetReference(
  """Dataset name"""
  dataset: String!

  """Strings of the target types names enabled for this reference"""
  typeNames: [String!]!
) on FIELD_DEFINITION | OBJECT

"""Field is a "raw" JSON alias for a different field"""
directive @jsonAlias(
  """Source field name"""
  for: String!
) on FIELD_DEFINITION

"""Field references one or more documents"""
directive @reference on FIELD_DEFINITION

"""Representation of a workEmail"""
type AllowedCurrency {
  currency: String!
  id: String!
}

type Block {
  _key: String
  _type: String
  children: [Span]
  list: String
  style: String
}

input BooleanFilter {
  """Checks if the value is equal to the given input."""
  eq: Boolean

  """Checks if the value is defined."""
  is_defined: Boolean

  """Checks if the value is not equal to the given input."""
  neq: Boolean
}

enum CommnunityStatus {
  active
  inactive
}

"""Representation of a Community"""
type Community {
  description: String
  events: [Event!]!
  id: String!
  name: String
  status: CommnunityStatus!
  users: [User!]!
}

input CommunityCreateInput {
  description: String!
  name: String!
  slug: String!
}

"""Representation of a workEmail"""
type Company {
  description: String
  domain: String!
  hasBeenUpdated: Boolean!
  id: String!
  logo: String
  name: String
  salarySubmissions: Int!

  """Not available to users"""
  status: CompanyStatus
  website: String
}

enum CompanyStatus {
  active
  draft
  inactive
}

input CreateCompanyInput {
  description: String

  """
  The email domain of the company (What we'll use to match the company to the user on account-creation)
  """
  domain: String!
  logo: String
  name: String
  status: CompanyStatus
  website: String
}

input CreateSalaryInput {
  amount: Int!
  companyId: String!
  confirmationToken: String!
  countryCode: String!
  currencyId: String!
  gender: Gender!
  genderOtherText: String!
  typeOfEmployment: TypeOfEmployment!
  workMetodology: WorkMetodology!
  workRoleId: String!
  yearsOfExperience: Int!
}

type CrossDatasetReference {
  _dataset: String
  _key: String
  _projectId: String
  _ref: String
  _type: String
  _weak: Boolean
}

input CrossDatasetReferenceFilter {
  _dataset: StringFilter
  _key: StringFilter
  _projectId: StringFilter
  _ref: StringFilter
  _type: StringFilter
  _weak: BooleanFilter
}

input CrossDatasetReferenceSorting {
  _dataset: SortOrder
  _key: SortOrder
  _projectId: SortOrder
  _ref: SortOrder
  _type: SortOrder
  _weak: SortOrder
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilter {
  """Checks if the value is equal to the given input."""
  eq: Date

  """Checks if the value is greater than the given input."""
  gt: Date

  """Checks if the value is greater than or equal to the given input."""
  gte: Date

  """Checks if the value is defined."""
  is_defined: Boolean

  """Checks if the value is lesser than the given input."""
  lt: Date

  """Checks if the value is lesser than or equal to the given input."""
  lte: Date

  """Checks if the value is not equal to the given input."""
  neq: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DatetimeFilter {
  """Checks if the value is equal to the given input."""
  eq: DateTime

  """Checks if the value is greater than the given input."""
  gt: DateTime

  """Checks if the value is greater than or equal to the given input."""
  gte: DateTime

  """Checks if the value is defined."""
  is_defined: Boolean

  """Checks if the value is lesser than the given input."""
  lt: DateTime

  """Checks if the value is lesser than or equal to the given input."""
  lte: DateTime

  """Checks if the value is not equal to the given input."""
  neq: DateTime
}

"""A Sanity document"""
interface Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
}

input DocumentFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
}

input DocumentSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
}

type Donor implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  discordUsername: String
  githubUsername: String

  """El nombre q se usará en el sitio público para identificar al donante"""
  name: String
  profileImage: Image
  status: Status
}

input DonorFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  discordUsername: StringFilter
  githubUsername: StringFilter
  name: StringFilter
  profileImage: ImageFilter
  status: StatusFilter
}

input DonorSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  discordUsername: SortOrder
  githubUsername: SortOrder
  name: SortOrder
  profileImage: ImageSorting
}

"""
Representation of an Event (Events and Users, is what tickets are linked to)
"""
type Event {
  address: String
  community: Community
  description: String
  endDateTime: DateTime
  id: String!
  latitude: String
  longitude: String
  maxAttendees: Int
  meetingURL: String
  name: String!
  startDateTime: DateTime!
  status: EventStatus!
  tags: [Tag!]!
  tickets(input: EventsTicketsSearchInput): [UserTicket!]!
  users: [User!]!
  visibility: EventVisibility!
}

input EventCreateInput {
  address: String
  communityId: String!
  description: String!
  endDateTime: DateTime
  latitude: String
  longitude: String
  maxAttendees: Int!
  meetingURL: String
  name: String!
  startDateTime: DateTime!
  status: EventStatus
  timeZone: String
  visibility: EventVisibility
}

type EventImage implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  eventType: EventType
  externalId: String
  externalURL: String
  image: Image
  title: String
  url: String
}

input EventImageFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  eventType: EventTypeFilter
  externalId: StringFilter
  externalURL: StringFilter
  image: ImageFilter
  title: StringFilter
  url: StringFilter
}

input EventImageSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  externalId: SortOrder
  externalURL: SortOrder
  image: ImageSorting
  title: SortOrder
  url: SortOrder
}

type EventInstance implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  bgColor: String
  endDate: Date
  eventType: EventType
  image: Image
  mergedTitle: Boolean
  startDate: Date
  title: String
  url: String
}

input EventInstanceFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  bgColor: StringFilter
  endDate: DateFilter
  eventType: EventTypeFilter
  image: ImageFilter
  mergedTitle: BooleanFilter
  startDate: DateFilter
  title: StringFilter
  url: StringFilter
}

input EventInstanceSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  bgColor: SortOrder
  endDate: SortOrder
  image: ImageSorting
  mergedTitle: SortOrder
  startDate: SortOrder
  title: SortOrder
  url: SortOrder
}

enum EventStatus {
  active
  inactive
}

type EventType implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  bgColor: String
  image: Image
  title: String
}

input EventTypeFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  bgColor: StringFilter
  image: ImageFilter
  title: StringFilter
}

input EventTypeSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  bgColor: SortOrder
  image: ImageSorting
  title: SortOrder
}

enum EventVisibility {
  private
  public
  unlisted
}

input EventsSearchInput {
  id: String
  name: String
  startDateTimeFrom: DateTime
  startDateTimeTo: DateTime
  status: EventStatus
  visibility: EventVisibility
}

input EventsTicketsSearchInput {
  approvalStatus: TicketApprovalStatus
  id: String
  paymentStatus: TicketPaymentStatus
  redemptionStatus: TicketRedemptionStatus
  status: TicketStatus
}

type File {
  _key: String
  _type: String
  asset: SanityFileAsset
}

input FileFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityFileAssetFilter
}

input FileSorting {
  _key: SortOrder
  _type: SortOrder
}

input FloatFilter {
  """Checks if the value is equal to the given input."""
  eq: Float

  """Checks if the value is greater than the given input."""
  gt: Float

  """Checks if the value is greater than or equal to the given input."""
  gte: Float

  """Checks if the value is defined."""
  is_defined: Boolean

  """Checks if the value is lesser than the given input."""
  lt: Float

  """Checks if the value is lesser than or equal to the given input."""
  lte: Float

  """Checks if the value is not equal to the given input."""
  neq: Float
}

enum Gender {
  agender
  female
  genderfluid
  genderqueer
  male
  non_binary
  other
  prefer_not_to_say
  transgender_female
  transgender_male
  two_spirit
}

type Geopoint {
  _key: String
  _type: String
  alt: Float
  lat: Float
  lng: Float
}

input GeopointFilter {
  _key: StringFilter
  _type: StringFilter
  alt: FloatFilter
  lat: FloatFilter
  lng: FloatFilter
}

input GeopointSorting {
  _key: SortOrder
  _type: SortOrder
  alt: SortOrder
  lat: SortOrder
  lng: SortOrder
}

input IDFilter {
  """Checks if the value is equal to the given input."""
  eq: ID
  in: [ID!]

  """Checks if the value matches the given word/words."""
  matches: ID

  """Checks if the value is not equal to the given input."""
  neq: ID
  nin: [ID!]
}

type Image {
  _key: String
  _type: String
  asset: SanityImageAsset
  crop: SanityImageCrop
  hotspot: SanityImageHotspot
}

input ImageFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityImageAssetFilter
  crop: SanityImageCropFilter
  hotspot: SanityImageHotspotFilter
}

input ImageSorting {
  _key: SortOrder
  _type: SortOrder
  crop: SanityImageCropSorting
  hotspot: SanityImageHotspotSorting
}

input IntFilter {
  """Checks if the value is equal to the given input."""
  eq: Int

  """Checks if the value is greater than the given input."""
  gt: Int

  """Checks if the value is greater than or equal to the given input."""
  gte: Int

  """Checks if the value is defined."""
  is_defined: Boolean

  """Checks if the value is lesser than the given input."""
  lt: Int

  """Checks if the value is lesser than or equal to the given input."""
  lte: Int

  """Checks if the value is not equal to the given input."""
  neq: Int
}

type Mutation {
  """Approve a ticket"""
  approvalUserTicket(userTicketId: String!): UserTicket!

  """Cancel a ticket"""
  cancelUserTicket(userTicketId: String!): UserTicket!

  """Create an community"""
  createCommunity(input: CommunityCreateInput!): Community!

  """Create a company"""
  createCompany(input: CreateCompanyInput!): Company!

  """Create an event"""
  createEvent(input: EventCreateInput!): Event!

  """Create a salary"""
  createSalary(input: CreateSalaryInput!): Salary!

  """Edit a ticket"""
  editTicket(input: TicketEditInput!): Ticket!

  """Redeem a ticket"""
  redeemUserTicket(userTicketId: String!): UserTicket!

  """
  Kickoff the email validation flow. This flow will links an email to a user, create a company if it does not exist, and allows filling data for that email's position
  """
  startWorkEmailValidation(email: String!): WorkEmail!

  """Update a company"""
  updateCompany(input: UpdateCompanyInput!): Company!

  """Create a salary"""
  updateSalary(input: UpdateSalaryInput!): Salary!

  """Update a user"""
  updateUser(input: userEditInput!): User!

  """Update a user role"""
  updateUserRoleInCommunity(input: updateUserRoleInCommunityInput!): User!

  """Validates work email for a user"""
  validateWorkEmail(confirmationToken: String!): WorkEmail!
}

input MyTicketsSearchInput {
  approvalStatus: TicketApprovalStatus
  eventId: String
  paymentStatus: TicketPaymentStatus
  redemptionStatus: TicketRedemptionStatus
  status: TicketStatus
}

type Query {
  """Get a list of communities. Filter by name, id, or status"""
  communities(id: String, name: String, status: CommnunityStatus): [Community!]!

  """Get a community by id"""
  community(id: String!): Community

  """Get all available companies"""
  companies(input: SearchCompaniesInput): [Company!]!

  """Get all available companies"""
  company(companyId: String!): Company!

  """Get an event by id"""
  event(id: String!): Event

  """Get a list of events. Filter by name, id, status or date"""
  events(input: EventsSearchInput): [Event!]!

  """Get the current user"""
  me: User!

  """Get a list of tickets for the current user"""
  myTickets(input: MyTicketsSearchInput): [UserTicket!]!
  status(name: String): String!

  """Get a list of tags"""
  tags(input: TagSearchInput): [Tag!]!

  """Get a list of users"""
  users: [User!]!

  """Get a workEmail and check if its validated for this user"""
  workEmail(email: String!): WorkEmail!
}

type RootQuery {
  Document(
    """Document document ID"""
    id: ID!
  ): Document
  Donor(
    """Donor document ID"""
    id: ID!
  ): Donor
  EventImage(
    """EventImage document ID"""
    id: ID!
  ): EventImage
  EventInstance(
    """EventInstance document ID"""
    id: ID!
  ): EventInstance
  EventType(
    """EventType document ID"""
    id: ID!
  ): EventType
  SanityFileAsset(
    """SanityFileAsset document ID"""
    id: ID!
  ): SanityFileAsset
  SanityImageAsset(
    """SanityImageAsset document ID"""
    id: ID!
  ): SanityImageAsset
  Status(
    """Status document ID"""
    id: ID!
  ): Status
  allDocument(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [DocumentSorting!]
    where: DocumentFilter
  ): [Document!]!
  allDonor(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [DonorSorting!]
    where: DonorFilter
  ): [Donor!]!
  allEventImage(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [EventImageSorting!]
    where: EventImageFilter
  ): [EventImage!]!
  allEventInstance(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [EventInstanceSorting!]
    where: EventInstanceFilter
  ): [EventInstance!]!
  allEventType(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [EventTypeSorting!]
    where: EventTypeFilter
  ): [EventType!]!
  allSanityFileAsset(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [SanityFileAssetSorting!]
    where: SanityFileAssetFilter
  ): [SanityFileAsset!]!
  allSanityImageAsset(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [SanityImageAssetSorting!]
    where: SanityImageAssetFilter
  ): [SanityImageAsset!]!
  allStatus(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [StatusSorting!]
    where: StatusFilter
  ): [Status!]!

  """Get a list of communities. Filter by name, id, or status"""
  communities(id: String, name: String, status: CommnunityStatus): [Community!]!

  """Get a community by id"""
  community(id: String!): Community

  """Get all available companies"""
  companies(input: SearchCompaniesInput): [Company!]!

  """Get all available companies"""
  company(companyId: String!): Company!

  """Get an event by id"""
  event(id: String!): Event

  """Get a list of events. Filter by name, id, status or date"""
  events(input: EventsSearchInput): [Event!]!

  """Get the current user"""
  me: User!

  """Get a list of tickets for the current user"""
  myTickets(input: MyTicketsSearchInput): [UserTicket!]!
  status(name: String): String!

  """Get a list of tags"""
  tags(input: TagSearchInput): [Tag!]!

  """Get a list of users"""
  users: [User!]!

  """Get a workEmail and check if its validated for this user"""
  workEmail(email: String!): WorkEmail!
}

"""Representation of a workEmail"""
type Salary {
  amount: Int!
  company: Company!
  countryCode: String!
  currency: AllowedCurrency!
  gender: Gender
  genderOtherText: String
  id: String!
  typeOfEmployment: TypeOfEmployment!
  workMetodology: WorkMetodology!
  workRole: WorkRole!
  yearsOfExperience: Int!
}

type SanityAssetSourceData {
  _key: String
  _type: String

  """
  The unique ID for the asset within the originating source so you can programatically find back to it
  """
  id: String

  """A canonical name for the source this asset is originating from"""
  name: String

  """
  A URL to find more information about this asset in the originating source
  """
  url: String
}

input SanityAssetSourceDataFilter {
  _key: StringFilter
  _type: StringFilter
  id: StringFilter
  name: StringFilter
  url: StringFilter
}

input SanityAssetSourceDataSorting {
  _key: SortOrder
  _type: SortOrder
  id: SortOrder
  name: SortOrder
  url: SortOrder
}

type SanityFileAsset implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  altText: String
  assetId: String
  description: String
  extension: String
  label: String
  mimeType: String
  originalFilename: String
  path: String
  sha1hash: String
  size: Float
  source: SanityAssetSourceData
  title: String
  url: String
}

input SanityFileAssetFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  altText: StringFilter
  assetId: StringFilter
  description: StringFilter
  extension: StringFilter
  label: StringFilter
  mimeType: StringFilter
  originalFilename: StringFilter
  path: StringFilter
  sha1hash: StringFilter
  size: FloatFilter
  source: SanityAssetSourceDataFilter
  title: StringFilter
  url: StringFilter
}

input SanityFileAssetSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  altText: SortOrder
  assetId: SortOrder
  description: SortOrder
  extension: SortOrder
  label: SortOrder
  mimeType: SortOrder
  originalFilename: SortOrder
  path: SortOrder
  sha1hash: SortOrder
  size: SortOrder
  source: SanityAssetSourceDataSorting
  title: SortOrder
  url: SortOrder
}

type SanityImageAsset implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  altText: String
  assetId: String
  description: String
  extension: String
  label: String
  metadata: SanityImageMetadata
  mimeType: String
  originalFilename: String
  path: String
  sha1hash: String
  size: Float
  source: SanityAssetSourceData
  title: String
  uploadId: String
  url: String
}

input SanityImageAssetFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  altText: StringFilter
  assetId: StringFilter
  description: StringFilter
  extension: StringFilter
  label: StringFilter
  metadata: SanityImageMetadataFilter
  mimeType: StringFilter
  originalFilename: StringFilter
  path: StringFilter
  sha1hash: StringFilter
  size: FloatFilter
  source: SanityAssetSourceDataFilter
  title: StringFilter
  uploadId: StringFilter
  url: StringFilter
}

input SanityImageAssetSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  altText: SortOrder
  assetId: SortOrder
  description: SortOrder
  extension: SortOrder
  label: SortOrder
  metadata: SanityImageMetadataSorting
  mimeType: SortOrder
  originalFilename: SortOrder
  path: SortOrder
  sha1hash: SortOrder
  size: SortOrder
  source: SanityAssetSourceDataSorting
  title: SortOrder
  uploadId: SortOrder
  url: SortOrder
}

type SanityImageCrop {
  _key: String
  _type: String
  bottom: Float
  left: Float
  right: Float
  top: Float
}

input SanityImageCropFilter {
  _key: StringFilter
  _type: StringFilter
  bottom: FloatFilter
  left: FloatFilter
  right: FloatFilter
  top: FloatFilter
}

input SanityImageCropSorting {
  _key: SortOrder
  _type: SortOrder
  bottom: SortOrder
  left: SortOrder
  right: SortOrder
  top: SortOrder
}

type SanityImageDimensions {
  _key: String
  _type: String
  aspectRatio: Float
  height: Float
  width: Float
}

input SanityImageDimensionsFilter {
  _key: StringFilter
  _type: StringFilter
  aspectRatio: FloatFilter
  height: FloatFilter
  width: FloatFilter
}

input SanityImageDimensionsSorting {
  _key: SortOrder
  _type: SortOrder
  aspectRatio: SortOrder
  height: SortOrder
  width: SortOrder
}

type SanityImageHotspot {
  _key: String
  _type: String
  height: Float
  width: Float
  x: Float
  y: Float
}

input SanityImageHotspotFilter {
  _key: StringFilter
  _type: StringFilter
  height: FloatFilter
  width: FloatFilter
  x: FloatFilter
  y: FloatFilter
}

input SanityImageHotspotSorting {
  _key: SortOrder
  _type: SortOrder
  height: SortOrder
  width: SortOrder
  x: SortOrder
  y: SortOrder
}

type SanityImageMetadata {
  _key: String
  _type: String
  blurHash: String
  dimensions: SanityImageDimensions
  hasAlpha: Boolean
  isOpaque: Boolean
  location: Geopoint
  lqip: String
  palette: SanityImagePalette
}

input SanityImageMetadataFilter {
  _key: StringFilter
  _type: StringFilter
  blurHash: StringFilter
  dimensions: SanityImageDimensionsFilter
  hasAlpha: BooleanFilter
  isOpaque: BooleanFilter
  location: GeopointFilter
  lqip: StringFilter
  palette: SanityImagePaletteFilter
}

input SanityImageMetadataSorting {
  _key: SortOrder
  _type: SortOrder
  blurHash: SortOrder
  dimensions: SanityImageDimensionsSorting
  hasAlpha: SortOrder
  isOpaque: SortOrder
  location: GeopointSorting
  lqip: SortOrder
  palette: SanityImagePaletteSorting
}

type SanityImagePalette {
  _key: String
  _type: String
  darkMuted: SanityImagePaletteSwatch
  darkVibrant: SanityImagePaletteSwatch
  dominant: SanityImagePaletteSwatch
  lightMuted: SanityImagePaletteSwatch
  lightVibrant: SanityImagePaletteSwatch
  muted: SanityImagePaletteSwatch
  vibrant: SanityImagePaletteSwatch
}

input SanityImagePaletteFilter {
  _key: StringFilter
  _type: StringFilter
  darkMuted: SanityImagePaletteSwatchFilter
  darkVibrant: SanityImagePaletteSwatchFilter
  dominant: SanityImagePaletteSwatchFilter
  lightMuted: SanityImagePaletteSwatchFilter
  lightVibrant: SanityImagePaletteSwatchFilter
  muted: SanityImagePaletteSwatchFilter
  vibrant: SanityImagePaletteSwatchFilter
}

input SanityImagePaletteSorting {
  _key: SortOrder
  _type: SortOrder
  darkMuted: SanityImagePaletteSwatchSorting
  darkVibrant: SanityImagePaletteSwatchSorting
  dominant: SanityImagePaletteSwatchSorting
  lightMuted: SanityImagePaletteSwatchSorting
  lightVibrant: SanityImagePaletteSwatchSorting
  muted: SanityImagePaletteSwatchSorting
  vibrant: SanityImagePaletteSwatchSorting
}

type SanityImagePaletteSwatch {
  _key: String
  _type: String
  background: String
  foreground: String
  population: Float
  title: String
}

input SanityImagePaletteSwatchFilter {
  _key: StringFilter
  _type: StringFilter
  background: StringFilter
  foreground: StringFilter
  population: FloatFilter
  title: StringFilter
}

input SanityImagePaletteSwatchSorting {
  _key: SortOrder
  _type: SortOrder
  background: SortOrder
  foreground: SortOrder
  population: SortOrder
  title: SortOrder
}

input Sanity_DocumentFilter {
  """All documents that are drafts."""
  is_draft: Boolean

  """All documents referencing the given document ID."""
  references: ID
}

input SearchCompaniesInput {
  companyName: String
  description: String
  domain: String
  website: String
}

type Slug {
  _key: String
  _type: String
  current: String
  source: String
}

input SlugFilter {
  _key: StringFilter
  _type: StringFilter
  current: StringFilter
  source: StringFilter
}

input SlugSorting {
  _key: SortOrder
  _type: SortOrder
  current: SortOrder
  source: SortOrder
}

enum SortOrder {
  """Sorts on the value in ascending order."""
  ASC

  """Sorts on the value in descending order."""
  DESC
}

type Span {
  _key: String
  _type: String
  marks: [String]
  text: String
}

type Status implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  key: Slug

  """Descriptive name of the status"""
  statusName: String
}

input StatusFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  key: SlugFilter
  statusName: StringFilter
}

input StatusSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  key: SlugSorting
  statusName: SortOrder
}

input StringFilter {
  """Checks if the value is equal to the given input."""
  eq: String
  in: [String!]

  """Checks if the value is defined."""
  is_defined: Boolean

  """Checks if the value matches the given word/words."""
  matches: String

  """Checks if the value is not equal to the given input."""
  neq: String
  nin: [String!]
}

"""
Representation of a tag. Tags can be associated to many things. An event, a community, etc.
"""
type Tag {
  description: String
  id: String!
  name: String
  slug: String!
}

input TagSearchInput {
  description: String
  id: String
  name: String
}

"""Representation of a ticket"""
type Ticket {
  currencyId: String
  description: String
  endDateTime: DateTime
  eventId: String!
  id: ID!
  name: String!
  price: Int
  quantity: Int
  requiresApproval: Boolean
  startDateTime: DateTime!
  status: TicketTemplateStatus!
  visibility: TicketTemplateVisibility!
}

enum TicketApprovalStatus {
  approved
  pending
}

input TicketEditInput {
  currencyId: String
  description: String
  endDateTime: DateTime
  eventId: String
  name: String
  price: Int
  quantity: Int
  requiresApproval: Boolean
  startDateTime: DateTime
  status: TicketTemplateStatus
  ticketId: String!
  visibility: TicketTemplateVisibility
}

enum TicketPaymentStatus {
  paid
  unpaid
}

enum TicketRedemptionStatus {
  pending
  redeemed
}

enum TicketStatus {
  active
  cancelled
}

enum TicketTemplateStatus {
  active
  inactive
}

enum TicketTemplateVisibility {
  private
  public
  unlisted
}

enum TypeOfEmployment {
  freelance
  fullTime
  partTime
}

input UpdateCompanyInput {
  companyId: String!
  description: String
  domain: String
  logo: String
  name: String
  website: String
}

input UpdateSalaryInput {
  amount: Int!
  companyId: String!
  confirmationToken: String!
  countryCode: String!
  currencyId: String!
  gender: Gender!
  genderOtherText: String!
  salaryId: String!
  typeOfEmployment: TypeOfEmployment!
  workMetodology: WorkMetodology!
  workRoleId: String!
  yearsOfExperience: Int!
}

"""Representation of a user"""
type User {
  bio: String
  communities: [Community!]!
  id: String!
  isSuperAdmin: Boolean
  lastName: String
  name: String
  username: String!
}

"""Representation of a User ticket"""
type UserTicket {
  approvalStatus: TicketApprovalStatus!
  id: ID!
  paymentStatus: TicketPaymentStatus!
  redemptionStatus: TicketRedemptionStatus!
  status: TicketStatus!
}

"""Representation of a workEmail"""
type WorkEmail {
  id: String!
  isValidated: Boolean!
}

enum WorkMetodology {
  hybrid
  office
  remote
}

"""Representation of a workEmail"""
type WorkRole {
  description: String!
  id: String!
  name: String!
  seniority: String!
}

input updateUserRoleInCommunityInput {
  communityId: String!
  role: String!
  userId: String!
}

input userEditInput {
  bio: String
  id: String!
  lastName: String
  name: String
  username: String
}